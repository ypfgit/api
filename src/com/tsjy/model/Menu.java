package com.tsjy.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.jfinal.kit.JsonKit;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.plat.core.db.MDb;
import com.plat.core.dto.BaseDto;
import com.plat.core.dto.Dto;
import com.plat.core.util.TSConstants;
import com.plat.core.util.TSUtils;
import com.tsjy.model.base.BaseMenu;

/**
 * Generated by JFinal.
 */
@SuppressWarnings(value={"serial","unchecked","rawtypes"})
public class Menu extends BaseMenu<Menu> {
	public static final Menu dao = new Menu();

	public String getModule_name() {

		return getStr("module_name");
	}

	public void setModule_name(String module_name) {
		set("module_name", module_name);
	}

	public String getModule_en_name() {
		return getStr("module_en_name");
	}

	public void setModule_en_name(String module_en_name) {
		set("module_en_name", module_en_name);
	}

	public String getModule_home_page() {
		return getStr("module_home_page");
	}

	public void setModule_home_page(String module_home_page) {
		set("module_home_page", module_home_page);
	}

	public String getModule_collapsed() {
		return getStr("module_collapsed");
	}

	public void setModule_collapsed(String module_collapsed) {
		set("module_collapsed", module_collapsed);
	}

	/*
	 * 查询所有菜单
	 */
	public List<Menu> getMenuList(String userid, String parentid, int level) {

		Dto dto = new BaseDto();
		/*
		 * dto.put("userid", userid); dto.put("level", level);
		 * dto.put("parentid", parentid);
		 */
		List<Menu> menus = (List<Menu>) MDb.find(dao, "menu.queryMenu", dto);
		return menus;
	}

	/*
	 * 查询用户的模块及菜单
	 */
	public List<Menu> getAuthMenuList(String userid, String parentid, int level) {

		Dto dto = new BaseDto();
		dto.put("userid", userid);
		dto.put("level", level);
		dto.put("parentid", parentid);
		List<Menu> menus = (List<Menu>) MDb
				.find(dao, "menu.queryAuthMenu", dto);
		return menus;
	}

	/**
	 * 首页侧边栏 用户的授权菜单
	 * 
	 * @param userid
	 * @param parentid
	 * @param level
	 * @return
	 */
	public List getSideMenuItems(String userid, String parentid, int level) {

		List<Menu> menus = getAuthMenuList(userid, parentid, level);
		List<Dto> menuItems = new ArrayList<Dto>();
		for (Menu menu : menus) {
			if (menu.getParentId().equals(parentid)) {
				List<Dto> sonItems = new ArrayList<Dto>();

				for (Menu menuitem : menus) {
					if (menuitem.getParentId().equals(menu.getId())) {
						Dto sonDto = new BaseDto();
						sonDto.put("text", menuitem.getText());
						sonDto.put("href", menuitem.getUrl());
						sonDto.put(
								"icon",
								TSUtils.isEmpty(menuitem.getIcon()) ? "upload/criminal/rili.png"
										: menuitem.getIcon());
						sonDto.put("leaf", menuitem.getLeaf());
						sonDto.put("id", menuitem.getId());
						sonDto.put("iconcss", menuitem.getIconcss());
						sonDto.put("remark", menuitem.getRemark());
						sonItems.add(sonDto);
					}
				}
				Dto rootDto = new BaseDto();
				rootDto.put("text", menu.getText());
				rootDto.put(
						"icon",
						TSUtils.isEmpty(menu.getIcon()) ? "upload/criminal/rili.png" : menu
								.getIcon());
				rootDto.put("collapsed", "true");
				rootDto.put("items", sonItems);
				rootDto.put("leaf", menu.getLeaf());
				rootDto.put("id", menu.getId());
				rootDto.put("iconcss", menu.getIconcss());
				rootDto.put("remark", menu.getRemark());
				menuItems.add(rootDto);
			}
		}
		return menuItems;
	}

	/**
	 * 首页侧边栏 用户的授权菜单
	 * 
	 * @param userid
	 * @param parentid
	 * @param level
	 * @return
	 */
	public String getProductTreeItems(String userid, String parentid, int level) {

		List<Menu> menus = getAuthMenuList(userid, parentid, level);
		List<Dto> menuItems = new ArrayList<Dto>();
		for (Menu menu : menus) {
			if (menu.getParentId().equals(parentid)) {
				List<Dto> sonItems = new ArrayList<Dto>();

				for (Menu menuitem : menus) {
					if (menuitem.getParentId().equals(menu.getId())) {
						Dto sonDto = new BaseDto();
						sonDto.put("text", menuitem.getText());
						sonDto.put("url", menuitem.getUrl());
						sonDto.put(
								"icon",
								TSUtils.isEmpty(menuitem.getIcon()) ? "&#xf00c5;"
										: menuitem.getIcon());
						sonDto.put("leaf", menuitem.getLeaf().equals("1"));
						sonDto.put("id", menuitem.getId());
						sonItems.add(sonDto);
					}
				}
				Dto rootDto = new BaseDto();
				rootDto.put("text", menu.getText());
				if (menu.getLeaf().equals("0")) {
					rootDto.put("icon",
							TSUtils.isEmpty(menu.getIcon()) ? "&#xf01a9;"
									: menu.getIcon());
					rootDto.put("expanded", false);
					rootDto.put("children", sonItems);
				} else {
					rootDto.put("url", menu.getUrl());
				}

				rootDto.put("leaf", menu.getLeaf().equals("1"));
				rootDto.put("id", menu.getId());
				menuItems.add(rootDto);
			}
		}
		return JsonKit.toJson(menuItems);
	}
	
	

	public Map<Menu, List<Menu>> getMenuMap(String userid) {
		Map<Menu, List<Menu>> menuMap = new HashMap<Menu, List<Menu>>();

		List<Menu> menus = this.getAuthMenuList(userid, "01", 5);

		for (Menu menuinfo : menus) {
			if (menuinfo.get("leaf").equals("0")) {
				List<Menu> items = new ArrayList<Menu>();

				for (Menu menuitem : menus) {
					if (menuitem.get("parent_id").equals(menuinfo.get("id"))) {
						items.add(menuitem);
					}
				}
				menuMap.put(menuinfo, items);
			}
		}

		return menuMap;
	}

	
	
	/**
	 * 菜单管理
	 * @return
	 */
	public List getMenuTreeList() {
		List<Menu> menus =  MDb.find(dao, "menu.queryMenu",null);

		List menuList = getSubNodes(menus, "0");
		return menuList;
	}

	public List getSubNodes(List<Menu> allNodes, String pid) {
		List subNodes = new ArrayList();

		for (Menu item : allNodes) {
			if (pid.equals(item.getParentId())) {
				Dto dto = new BaseDto();
				dto.put("id", item.getId());
				dto.put("leaf", item.getLeaf().equals("1"));
				dto.put("url", item.getUrl());
				dto.put("text", item.getText());
				dto.put("sort_no", item.getSortNo());
				dto.put("remark", item.getRemark());
				dto.put("type", item.getType());
				dto.put("icon", item.getIcon());
				if(item.getType().equals("0")){
					dto.put("checkable", true);
				}
				if(item.getParentId().equals("0")){
					dto.put("open", true);
				}
				List children = getSubNodes(allNodes, item.getId());
				if (TSUtils.isNotEmpty(children)) {
					dto.put("children", children);
				}
				subNodes.add(dto);
			}
		}
		return subNodes;
	}
	
	public void deleteMenu(String id,String pid){
		//删除菜单及子菜单
		MDb.update("menu.deleteMenuAndSon", new BaseDto("menuid", id));
		//查询父菜单的节点状态
		int sonNum = Db.queryLong("select count(1) num from ts_menu m where m.parent_id=?", pid).intValue();
		//更新父菜单的节点状态
		Dto in = new BaseDto("id", pid);
		if(sonNum==0){
			in.put("leaf", TSConstants.LEAF_Y);
		}else{
			in.put("leaf", TSConstants.LEAF_N);
		}
		MDb.update("menu.updateMenuLeaf", in);
		
	}
	
	/**
	 * 角色管理里的授权树
	 * @return
	 */
	public List getRoleMenuTreeList(String roleid) {
		List<Menu> menus = (List<Menu>) MDb.find(dao, "menu.queryPermissionMenus",new BaseDto("roleid", roleid));

		List menuList = getRoleSubNodes(menus, "0");
		return menuList;
	}

	public List getRoleSubNodes(List<Menu> allNodes, String pid) {
		List subNodes = new ArrayList();

		for (Menu item : allNodes) {
			if (pid.equals(item.getParentId())) {
				Dto dto = new BaseDto();
				dto.put("id", item.getId());
				dto.put("leaf", item.getLeaf().equals("1"));
				dto.put("text", item.getText());
				dto.put("checked", StrKit.notBlank((String) item.get("role_id")));
				//if(item.getParentId().equals("0")){
					dto.put("open", true);
				//}
				List children = getRoleSubNodes(allNodes, item.getId());
				if (TSUtils.isNotEmpty(children)) {
					dto.put("children", children);
				}
				subNodes.add(dto);
			}
		}
		return subNodes;
	}
}
